# Branch Naming Convention Enforcement
# 
# Purpose: Ensures all branches follow standardized naming conventions to maintain
#          consistency across the repository and improve developer workflow.
#
# Triggers:
#   - When a pull request is opened, edited, or synchronized
#   - When a new branch is created
#
# Naming conventions enforced:
#   - Protected branches: main, develop, staging
#   - Feature branches: feat/* or feature/*
#   - Bug fixes: fix/*
#   - Hotfixes: hotfix/*
#   - Releases: release/v*.*.*
#   - Documentation: docs/*
#   - Maintenance: chore/*, test/*, refactor/*, ci/*, build/*, perf/*, style/*, revert/*
#   - Version branches: v*.*
#   - Special: sync/*, dependabot/*

name: Branch Naming Check

on:
  pull_request:
    types: [opened, edited, synchronize]
  create:

jobs:
  check-branch-name:
    runs-on: ubuntu-latest
    steps:
      - name: Check branch naming convention
        uses: actions/github-script@v7
        with:
          script: |
            // Extract branch name from PR context or branch creation event
            const branchName = context.payload.pull_request?.head?.ref || context.ref.replace('refs/heads/', '');
            console.log(`Checking branch name: ${branchName}`);
            
            // Define allowed branch naming patterns using regular expressions
            const patterns = [
              /^main$/,                       // Main production branch
              /^develop$/,                    // Development branch
              /^staging$/,                    // Staging/pre-production branch
              /^feat\/.+$/,                  // New feature (short form)
              /^feature\/.+$/,               // New feature (long form)
              /^fix\/.+$/,                   // Bug fixes
              /^hotfix\/.+$/,                // Emergency production fixes
              /^release\/v\d+\.\d+\.\d+$/, // Release branches (semantic versioning)
              /^docs\/.+$/,                  // Documentation updates
              /^chore\/.+$/,                 // Maintenance tasks (no production code changes)
              /^test\/.+$/,                  // Test additions or fixes
              /^refactor\/.+$/,              // Code refactoring
              /^ci\/.+$/,                    // CI/CD pipeline changes
              /^build\/.+$/,                 // Build system changes
              /^perf\/.+$/,                  // Performance improvements
              /^style\/.+$/,                 // Code style/formatting changes
              /^revert\/.+$/,                // Reverting previous commits
              /^v\d+\.\d+$/,                // Version branches (e.g., v1.0)
              /^sync\/.+$/,                  // Synchronization branches
              /^dependabot\/.+$/             // Automated dependency updates
            ];
            
            // Check if branch name matches any allowed pattern
            const isValid = patterns.some(pattern => pattern.test(branchName));
            
            if (!isValid) {
              // Construct detailed error message with examples
              const message = `❌ Branch name "${branchName}" does not follow naming conventions.
              
              **Allowed patterns:**
              - \`main\`, \`develop\`, \`staging\` (protected branches)
              - \`feat/*\` or \`feature/*\` - New features
              - \`fix/*\` - Bug fixes
              - \`hotfix/*\` - Emergency fixes for production
              - \`release/v*.*.*\` - Release branches (e.g., release/v1.2.0)
              - \`docs/*\` - Documentation changes
              - \`chore/*\` - Maintenance tasks
              - \`test/*\` - Test improvements
              - \`refactor/*\` - Code refactoring
              - \`ci/*\` - CI/CD changes
              - \`build/*\` - Build system changes
              - \`perf/*\` - Performance improvements
              - \`style/*\` - Code style changes
              - \`revert/*\` - Revert commits
              - \`v*.*\` - Version branches
              
              Please rename your branch to follow these conventions.`;
              
              if (context.payload.pull_request) {
                // For pull requests, add a comment explaining the issue
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: message
                });
                
                // Add a label to highlight the naming issue
                try {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    labels: ['invalid branch name']
                  });
                } catch (e) {
                  // Label might not exist in the repository, which is okay
                  console.log('Label might not exist, continuing...');
                }
              }
              
              // Fail the workflow to prevent merging with invalid branch name
              core.setFailed(message);
            } else {
              console.log(`✅ Branch name "${branchName}" follows naming conventions.`);
              
              // Remove the 'invalid branch name' label if it was previously added
              if (context.payload.pull_request) {
                try {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    name: 'invalid branch name'
                  });
                } catch (e) {
                  // Label might not exist if branch was fixed - this is expected
                }
              }
            }