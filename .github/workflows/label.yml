name: Label Pull Requests

on:
  pull_request_target:
    types: [opened, synchronize]

jobs:
  label:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Label based on file paths
        uses: actions/labeler@v5
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          configuration-path: .github/labeler.yml
          sync-labels: true

      - name: Label based on PR title
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = context.payload.pull_request.title.toLowerCase();
            const labels = [];
            
            // Type labels based on conventional commit format
            if (title.startsWith('feat:') || title.startsWith('feat(')) {
              labels.push('type: feature');
            } else if (title.startsWith('fix:') || title.startsWith('fix(')) {
              labels.push('type: fix');
            } else if (title.startsWith('docs:') || title.startsWith('docs(')) {
              labels.push('type: documentation');
            } else if (title.startsWith('chore:') || title.startsWith('chore(')) {
              labels.push('type: chore');
            } else if (title.startsWith('test:') || title.startsWith('test(')) {
              labels.push('type: test');
            } else if (title.startsWith('refactor:') || title.startsWith('refactor(')) {
              labels.push('type: refactor');
            } else if (title.startsWith('perf:') || title.startsWith('perf(')) {
              labels.push('type: performance');
            } else if (title.startsWith('ci:') || title.startsWith('ci(')) {
              labels.push('type: ci');
            } else if (title.startsWith('build:') || title.startsWith('build(')) {
              labels.push('type: build');
            }
            
            // Priority labels based on keywords
            if (title.includes('critical') || title.includes('urgent')) {
              labels.push('priority: critical');
            } else if (title.includes('high priority')) {
              labels.push('priority: high');
            }
            
            // Breaking change label
            if (title.includes('!') || title.includes('breaking')) {
              labels.push('breaking change');
            }
            
            // Add labels if any were identified
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                labels: labels
              });
            }

      - name: Check for community contribution
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const author = context.payload.pull_request.user.login;
            const org = context.repo.owner;
            
            try {
              // Check if the author is a member of the organization
              await github.rest.orgs.checkMembershipForUser({
                org: org,
                username: author
              });
            } catch (error) {
              // If not a member, add community label
              if (error.status === 404) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  labels: ['community contribution']
                });
              }
            }