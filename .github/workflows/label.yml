# Automated Pull Request Labeling
#
# Purpose: Automatically applies labels to pull requests based on:
#          1. File paths changed (using .github/labeler.yml config)
#          2. PR title format (conventional commits)
#          3. Community contribution status
#
# Triggers:
#   - PR opened
#   - PR synchronized (new commits pushed)
#
# Features:
#   - Path-based labeling (frontend, backend, docs, etc.)
#   - Type detection from conventional commit format
#   - Priority detection from keywords
#   - Breaking change detection
#   - Community contribution identification
#
# Security Note:
#   Uses pull_request_target for write permissions on PRs from forks

name: Label Pull Requests

on:
  pull_request_target:  # Allows labeling PRs from forks
    types: [opened, synchronize]

jobs:
  label:
    runs-on: ubuntu-latest
    permissions:
      contents: read        # Read repository content
      pull-requests: write  # Add labels to PRs
    
    steps:
      # Apply labels based on file paths changed
      # Configuration is in .github/labeler.yml
      - name: Label based on file paths
        uses: actions/labeler@v5
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          configuration-path: .github/labeler.yml  # Maps file patterns to labels
          sync-labels: true                        # Remove labels when files no longer match

      # Parse PR title for conventional commit type and apply appropriate labels
      - name: Label based on PR title
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = context.payload.pull_request.title.toLowerCase();
            const labels = [];
            
            // Type labels based on conventional commit format
            // e.g., "feat: add new feature" -> "type: feature" label
            if (title.startsWith('feat:') || title.startsWith('feat(')) {
              labels.push('type: feature');
            } else if (title.startsWith('fix:') || title.startsWith('fix(')) {
              labels.push('type: fix');
            } else if (title.startsWith('docs:') || title.startsWith('docs(')) {
              labels.push('type: documentation');
            } else if (title.startsWith('chore:') || title.startsWith('chore(')) {
              labels.push('type: chore');
            } else if (title.startsWith('test:') || title.startsWith('test(')) {
              labels.push('type: test');
            } else if (title.startsWith('refactor:') || title.startsWith('refactor(')) {
              labels.push('type: refactor');
            } else if (title.startsWith('perf:') || title.startsWith('perf(')) {
              labels.push('type: performance');
            } else if (title.startsWith('ci:') || title.startsWith('ci(')) {
              labels.push('type: ci');
            } else if (title.startsWith('build:') || title.startsWith('build(')) {
              labels.push('type: build');
            }
            
            // Priority labels based on keywords in title
            if (title.includes('critical') || title.includes('urgent')) {
              labels.push('priority: critical');
            } else if (title.includes('high priority')) {
              labels.push('priority: high');
            }
            
            // Breaking change label - look for ! after type or 'breaking' keyword
            // e.g., "feat!: change API" or "feat(api): breaking change"
            if (title.includes('!') || title.includes('breaking')) {
              labels.push('breaking change');
            }
            
            // Apply all identified labels to the PR
            if (labels.length > 0) {
              try {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  labels: labels
                });
              } catch (error) {
                // Log warning but don't fail the workflow
                console.warn(`Warning: Could not add some labels: ${error.message}`);
                if (error.status === 403) {
                  console.warn('Permission denied - some labels may need to be created manually');
                }
              }
            }

      # Identify and label PRs from community contributors (non-org members)
      - name: Check for community contribution
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const author = context.payload.pull_request.user.login;
            const org = context.repo.owner;
            
            try {
              // Check if the PR author is a member of the organization
              await github.rest.orgs.checkMembershipForUser({
                org: org,
                username: author
              });
              // If no error, user is an org member - no label needed
            } catch (error) {
              // 404 error means user is not an org member
              if (error.status === 404) {
                try {
                  // Add community contribution label for external contributors
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.payload.pull_request.number,
                    labels: ['community contribution']
                  });
                } catch (labelError) {
                  // If label doesn't exist or we don't have permissions, log warning but don't fail
                  console.warn(`Warning: Could not add 'community contribution' label: ${labelError.message}`);
                  // Check if it's a permission issue or missing label
                  if (labelError.status === 403) {
                    console.warn('Permission denied - label may need to be created manually');
                  }
                }
              }
            }