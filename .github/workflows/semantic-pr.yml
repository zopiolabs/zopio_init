# Semantic Pull Request Title Validation
#
# Purpose: Enforces conventional commit format for PR titles to ensure
#          consistent versioning and changelog generation.
#
# Triggers:
#   - PR opened
#   - PR title edited
#   - PR synchronized (new commits)
#
# Validation:
#   - Title must follow: type(scope): description
#   - Allowed types: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert
#   - Optional scopes defined in configuration
#   - Breaking changes marked with ! must have documentation
#   - Subject must not start with uppercase
#
# Security Note:
#   Uses pull_request_target for write permissions on PRs from forks

name: Semantic PR Validation

on:
  pull_request_target:
    types:
      - opened
      - edited        # When PR title/body is modified
      - synchronize   # When new commits are pushed

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      # Validate PR title follows conventional commit format
      - name: Validate PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Allowed commit types from conventional commits spec
          types: |
            feat        # New features
            fix         # Bug fixes
            docs        # Documentation only changes
            style       # Code style changes (formatting, etc.)
            refactor    # Code changes that neither fix bugs nor add features
            perf        # Performance improvements
            test        # Adding or updating tests
            build       # Build system or dependency changes
            ci          # CI/CD configuration changes
            chore       # Other changes that don't modify src or test files
            revert      # Reverts a previous commit
          # Allowed scopes - typically align with package/app names
          scopes: |
            api             # API application
            app             # Main application
            auth            # Authentication packages
            build           # Build configuration
            ci              # CI/CD workflows
            cli             # CLI tool
            core            # Core utilities
            crud            # CRUD framework
            data            # Data providers
            database        # Database schema/config
            deps            # Dependencies
            design-system   # UI component library
            docs            # Documentation app
            email           # Email templates
            i18n            # Internationalization
            infra           # Infrastructure
            monitoring      # Monitoring/logging
            payments        # Payment processing
            security        # Security features
            studio          # Studio app
            tests           # Test infrastructure
            ui              # UI components
            web             # Marketing website
            workspace       # Monorepo configuration
          # Scope is optional but recommended
          requireScope: false
          # Only validate PR title, not individual commits
          validateSingleCommit: false
          # Ensure subject doesn't start with uppercase (conventional format)
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            doesn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.

      # Ensure breaking changes are properly documented
      - name: Check for breaking changes
        uses: actions/github-script@v7
        if: contains(github.event.pull_request.title, '!')  # Breaking change indicator
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = context.payload.pull_request.body || '';
            // Check if PR description includes breaking change documentation
            const hasBreakingSection = body.toLowerCase().includes('breaking change');
            
            if (!hasBreakingSection) {
              // Post comment explaining requirements
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: |
                  ⚠️ **Breaking Change Detected**
                  
                  Your PR title indicates a breaking change (contains "!"), but the PR description doesn't include a "Breaking Changes" section.
                  
                  Please update your PR description to include:
                  - A clear description of what is breaking
                  - Migration instructions for users
                  - Why this breaking change is necessary
                  
                  Example:
                  ```
                  ## Breaking Changes
                  
                  - Changed `doSomething()` API to require a config parameter
                  - Migration: Update all calls from `doSomething()` to `doSomething({ legacy: true })`
                  - This change allows for better extensibility and performance improvements
                  ```
              });
              
              // Fail the check to prevent merging without documentation
              core.setFailed('PR contains breaking changes but lacks proper documentation');
            }

      # Provide helpful guidance when validation fails
      - name: Add helpful comment for invalid titles
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = context.payload.pull_request.title;
            const validTypes = ['feat', 'fix', 'docs', 'style', 'refactor', 'perf', 'test', 'build', 'ci', 'chore', 'revert'];
            
            // Post detailed explanation with examples
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: |
                ❌ **Invalid PR Title**
                
                The PR title \`${title}\` doesn't follow our [Conventional Commits](https://github.com/zopiolabs/zopio_init/blob/main/.github/conventional-commits.md) format.
                
                **Valid format:** \`<type>(<scope>): <subject>\`
                
                **Valid types:** ${validTypes.join(', ')}
                
                **Examples:**
                - \`feat(auth): add OAuth2 support\`
                - \`fix(crud): resolve data race condition\`
                - \`docs: update installation guide\`
                - \`chore(deps): upgrade to Next.js 15\`
                
                For breaking changes, add \`!\` after the type/scope:
                - \`feat(api)!: change response format\`
                
                Please update your PR title to follow this format.
            });