# Continuous Integration Pipeline
#
# Purpose: Main CI workflow that runs on every push and PR to ensure code quality,
#          test coverage, and security compliance across the monorepo.
#
# Triggers:
#   - Push to: main, develop, staging branches
#   - PRs to: main, develop, staging, release/*, version branches (v1.0, etc.)
#
# Jobs:
#   1. Setup: Install dependencies
#   2. Lint: Code quality checks with Biome
#   3. Test: Run test suite with Vitest
#   4. Build: Verify successful compilation
#   5. Security: CodeQL security analysis
#
# Features:
#   - Parallel job execution for speed
#   - Graceful handling of missing scripts
#   - Security scanning with CodeQL
#   - Frozen lockfile for reproducible builds

name: CI

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop, staging, 'release/*', 'v[0-9]*.[0-9]*' ]

jobs:
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    # Use Node.js 20 LTS for stability
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    # Use specific pnpm version for consistency
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.11.0
        
    # Install with frozen lockfile to ensure exact dependency versions
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    # Create artifact of node_modules for other jobs
    - name: Create node_modules artifact
      run: tar -czf node_modules.tar.gz node_modules
      
    # Upload the artifact for use in other jobs
    - name: Upload node_modules artifact
      uses: actions/upload-artifact@v4
      with:
        name: node_modules
        path: node_modules.tar.gz
        retention-days: 1
      
  Lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: setup  # Depends on setup job completion
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.11.0
        
    - name: Download node_modules artifact
      uses: actions/download-artifact@v4
      with:
        name: node_modules
        
    - name: Extract node_modules
      run: tar -xzf node_modules.tar.gz
      
    - name: Install dependencies (fallback)
      run: |
        if [ ! -d "node_modules" ]; then
          pnpm install --frozen-lockfile
        fi
      
    # Run Biome linter via ultracite
    - name: Run linter
      run: pnpm lint
      
  Test:
    name: Test
    runs-on: ubuntu-latest
    needs: setup  # Depends on setup job completion
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.11.0
        
    - name: Download node_modules artifact
      uses: actions/download-artifact@v4
      with:
        name: node_modules
        
    - name: Extract node_modules
      run: tar -xzf node_modules.tar.gz
      
    - name: Install dependencies (fallback)
      run: |
        if [ ! -d "node_modules" ]; then
          pnpm install --frozen-lockfile
        fi
      
    # Run Vitest test suite
    - name: Run tests
      run: pnpm test
      
  Build:
    name: Build
    runs-on: ubuntu-latest
    needs: setup  # Depends on setup job completion
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.11.0
        
    - name: Download node_modules artifact
      uses: actions/download-artifact@v4
      with:
        name: node_modules
        
    - name: Extract node_modules
      run: tar -xzf node_modules.tar.gz
      
    - name: Install dependencies (fallback)
      run: |
        if [ ! -d "node_modules" ]; then
          pnpm install --frozen-lockfile
        fi
      
    # Build all packages in the monorepo
    - name: Build project
      run: pnpm build
      
  security:
    name: security/codeql
    runs-on: ubuntu-latest
    # Required permissions for CodeQL to function properly
    permissions:
      security-events: write  # Upload SARIF results
      packages: read         # Access package metadata
      actions: read          # Read workflow logs
      contents: read         # Read repository content
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initialize CodeQL for JavaScript/TypeScript analysis
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript-typescript
        
    # Run CodeQL security analysis and upload results
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3